{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Main","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","index","disabledNext","disabledPrev","e","setState","profiles","length","_this2","_this$state","profile","react_default","a","createElement","className","App_Profile","App_Prev","toggle","togglePrev","active","App_Next","toggleNext","React","Component","Prev","mdbreact","md","onClick","disabled","Next","Profile","data","fetch","songs","then","response","json","artistsData","values","forEach","artistData","push","track","console","log","name","src","image","App","App_Main","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.53d80274.chunk.js","sourcesContent":["import React from 'react';\r\nimport profiles from './profiles';\r\nimport { Container, Row, Col , Button } from 'mdbreact';\r\nclass Main extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n     this.state = {\r\n      index: 0,\r\n      disabledNext: false,\r\n      disabledPrev: false\r\n    }\r\n   }\r\n  \r\n  togglePrev(e) {\r\n    let index = this.state.index - 1;\r\n    let disabledPrev = (index === 0);\r\n\r\n    this.setState({ index: index, disabledPrev: disabledPrev, disabledNext: false })\r\n  }\r\n\r\n toggleNext(e) {\r\n     let index = this.state.index + 1;\r\n     let disabledNext = index === (this.props.profiles.length - 1);\r\n\r\n     this.setState({ index: index, disabledNext: disabledNext, disabledPrev: false })\r\n   }\r\n\r\nrender() {\r\n     const { index, disabledNext, disabledPrev } = this.state\r\n     const profile = this.props.profiles ? this.props.profiles[index] : null\r\n     \r\n     if (profile) {\r\n       return (\r\n         <div className='profile'>\r\n                \r\n           <Profile {...profile} />\r\n           <div>\r\n             <Prev toggle={(e) => this.togglePrev(e)} active={disabledPrev} />\r\n             <Next toggle={(e) => this.toggleNext(e)} active={disabledNext} />\r\n           \r\n           </div>\r\n         \r\n         </div>\r\n       )\r\n     } else {\r\n       return <span>error</span>\r\n     }\r\n  }\r\n\r\n  \r\n}\r\n\r\nconst Prev = (props) => {\r\n  return ( \r\n    <Container>\r\n    <Row>\r\n      <Col md=\"6\">\r\n    <Button onClick={props.toggle} disabled={props.active}>Previous</Button>\r\n    </Col>\r\n        </Row>\r\n      </Container>\r\n    \r\n  );\r\n}\r\n\r\nconst Next = (props)=> {\r\n  return (\r\n    <Container>\r\n    <Row>\r\n      <Col md=\"6\">\r\n    <Button onClick={props.toggle} disabled={props.active}>Next</Button>\r\n\r\n    </Col>\r\n        </Row>\r\n      </Container>\r\n  );\r\n}\r\n\r\nconst Profile = (props) => {\r\n  const data = [] ;\r\n  fetch(props.songs)\r\n  .then(response =>  response.json() )\r\n  //  .then(text =>  console.log(text.toptracks.track))\r\n   .then(artistsData => {\r\n    Object.values(artistsData).forEach(artistData => {\r\n      data.push({\r\n        artistData: artistData.track\r\n      })\r\n     console.log(data);\r\n    })\r\n  })\r\n  return (\r\n\r\n\r\n    <Container>\r\n        <Row>\r\n          <Col md=\"6\">\r\n            <form>\r\n              <p className=\"h5 text-center mb-4\">{props.name}</p>\r\n              \r\n              <div className=\"text-center\">\r\n              <img src= {props.image} className=\"mx-auto d-block\"/> \r\n              </div>\r\n            </form>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    \r\n  );\r\n}\r\n\r\nconst App = () => (\r\n  <div>\r\n    <Main profiles={profiles} />\r\n  \r\n  </div>\r\n)\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport \"font-awesome/css/font-awesome.min.css\";\r\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\r\nimport \"mdbreact/dist/css/mdb.css\";\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}