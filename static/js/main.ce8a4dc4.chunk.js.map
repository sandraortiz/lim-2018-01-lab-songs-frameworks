{"version":3,"sources":["Lista.js","Songs.js","App.js","serviceWorker.js","index.js"],"names":["Lista","props","react_default","a","createElement","className","name","src","image","Songs","songs","map","note","mdbreact","class","playcount","color","onClick","likes","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","like","alert","state","artists","index","disabledNext","disabledPrev","_this2","artistInfo","profiles","artist","fetch","then","response","json","catch","err","console","error","Promise","all","arrayArtist","dataArtist","log","toptracks","track","setState","e","preventDefault","length","_this3","_this$state","src_Lista","togglePrev","bind","disabled","toggleNext","src_Songs","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ce8a4dc4.chunk.js","sourcesContent":["\r\nimport React from 'react';\r\nconst Lista = (props) => {\r\n return(\r\n<div> \r\n\r\n  <h1 className=\"text-center\">{props.name}</h1>\r\n  <img src= {props.image} className=\"mx-auto d-block\"/> \r\n\r\n  \r\n</div>\r\n )\r\n}\r\n\r\nexport default Lista","import React from 'react';\r\nimport { ListGroup, ListGroupItem } from 'mdbreact'\r\nimport{Container} from 'mdbreact';\r\nimport{Button} from 'mdbreact';\r\n\r\n\r\n\r\n\r\nconst Songs = (props) => {\r\n  \r\n  \r\n  \r\n return(\r\n<div> \r\n  \r\n  <ul>\r\n  {props.songs.map((note) => \r\n   <Container> \r\n<ListGroup>\r\n    <div class=\"d-flex \">\r\n  <div class=\"p-2 w-100 \">\r\n  <ListGroupItem >\r\n  <div className=\"row\">\r\n\r\n    <div className=\"col-5\">\r\n    <p> {note.name}   </p>\r\n    \r\n    </div>\r\n\r\n    <div className=\"col-3\">\r\n    <p> {note.playcount} </p>\r\n    </div>\r\n\r\n\r\n    <div className=\"col-3\">\r\n    {/* <p> {note.playcount} </p> */}\r\n    <Button color=\"elegant\"  onClick = {() => props.likes }  ><i class=\"fas fa-thumbs-up\"></i></Button>\r\n    <Button color=\"elegant\"><i class=\"fas fa-thumbs-down\"></i></Button>\r\n    \r\n    </div>\r\n\r\n  </div>\r\n\r\n<div  >\r\n\r\n</div>\r\n\r\n\r\n\r\n  </ListGroupItem>\r\n  </div>\r\n  \r\n</div>\r\n  </ListGroup>\r\n\r\n\r\n\r\n\r\n</Container>\r\n       )}   \r\n</ul>\r\n</div>\r\n )\r\n}\r\n\r\nexport default Songs","import React from 'react';\r\nimport Lista from './Lista'\r\nimport Songs from './Songs'\r\nimport{Button} from 'mdbreact';\r\nimport './App.css';\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n   this.state = {\r\n      artists: [],\r\n      index: 0,\r\n      disabledNext: false,\r\n      disabledPrev: false ,\r\n   \r\n    }\r\n  }\r\n\r\n  componentDidMount( ) {\r\n    const profile = this.props.profiles \r\n   const artistInfo = profile.map(artist =>\r\n      fetch(artist.songs)\r\n        .then(response => response.json())\r\n        .catch(err => console.error(err))\r\n    )\r\n    Promise.all(artistInfo)\r\n      .then(arrayArtist => {\r\n        const dataArtist = arrayArtist.map(artist => {\r\n          console.log(artist);\r\n          \r\n                    return {\r\n              name:  artist.toptracks.track[0].artist.name,\r\n          image: artist.toptracks.track[0].image[3]['#text'],\r\n            songs:artist.toptracks.track \r\n            \r\n          \r\n          }\r\n        })\r\n        this.setState({\r\n          artists: dataArtist\r\n        })\r\n      })\r\n  \r\n\r\n  }\r\n  togglePrev(e) {\r\n    let index = this.state.index - 1\r\n    let disabledPrev = false\r\n    if (index <= 0) {\r\n      e.preventDefault()\r\n      index = 0\r\n      disabledPrev = true\r\n    }\r\n\r\n    this.setState({ index: index, disabledPrev: disabledPrev, disabledNext: false })\r\n  }\r\n\r\n  toggleNext(e) {\r\n    let index = this.state.index + 1\r\n    let disabledNext = false\r\n    if (index === this.props.profiles.length - 1    ) {\r\n      e.preventDefault()\r\n      index = this.props.profiles.length - 1\r\n      disabledNext = true\r\n    }\r\n\r\n    this.setState({ index: index, disabledNext: disabledNext, disabledPrev: false })\r\n  }\r\n\r\n\r\n  like = ( ) => {\r\n    alert('hola')\r\n    // const { artists } = this.state \r\n  \r\n    // console.log(artists);\r\n    \r\n  } \r\n  render() {\r\n    const { disabledNext, disabledPrev } = this.state\r\n        return (\r\n        <div className = \"App\" > \r\n          <div>\r\n            \r\n            {this.state.artists.map((artist) =>\r\n              <Lista \r\n                name={artist.name}\r\n                image={artist.image}\r\n                \r\n                // songs={artist.songs}\r\n               />\r\n\r\n            )[this.state.index]\r\n }\r\n\r\n <div className=\"d-flex justify-content-center\">\r\n <Button color=\"elegant\" onClick={this.togglePrev.bind(this)} disabled={disabledPrev} ><i class=\"fas fa-backward\"></i></Button>\r\n       <Button color=\"elegant\" onClick={this.toggleNext.bind(this)} disabled={disabledNext}><i class=\"fas fa-forward\"></i></Button>\r\n    \r\n </div>\r\n        \r\n\r\n           {/* <button onClick={this.togglePrev.bind(this)} disabled={disabledPrev}>Prev</button>\r\n            <button onClick={this.toggleNext.bind(this)} disabled={disabledNext}>Next</button>\r\n\r\n   */}\r\n  {this.state.artists.map((artist) =>\r\n              <Songs\r\n                songs={artist.songs}\r\n                likes={this.like}\r\n               />\r\n\r\n            )[this.state.index]\r\n }\r\n\r\n \r\n          </div>\r\n       \r\n</div>\r\n      )\r\n    \r\n  }\r\n}\r\nexport default App","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n\r\n              // Execute callback\r\n              if (config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport \"font-awesome/css/font-awesome.min.css\";\r\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\r\nimport \"mdbreact/dist/css/mdb.css\";\r\n\r\nimport profiles from './profiles';\r\nReactDOM.render(<App   profiles={profiles}/>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}