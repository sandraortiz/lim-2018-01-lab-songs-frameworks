{"version":3,"sources":["Lista.js","Songs.js","App.js","serviceWorker.js","index.js"],"names":["Lista","props","react_default","a","createElement","name","src","image","className","Songs","console","log","playcount","songs","map","note","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","artists","index","disabledNext","disabledPrev","_this2","artistInfo","profiles","artist","fetch","then","response","json","catch","err","error","Promise","all","arrayArtist","dataArtist","toptracks","track","setState","e","preventDefault","length","_this$state","src_Lista","onClick","togglePrev","bind","disabled","toggleNext","src_Songs","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ce4e9815.chunk.js","sourcesContent":["\r\nimport React from 'react';\r\nconst Lista = (props) => {\r\n return(\r\n<div> \r\n  <p>{props.name}</p>\r\n  <img src= {props.image} className=\"mx-auto d-block\"/> \r\n\r\n  \r\n</div>\r\n )\r\n}\r\n\r\nexport default Lista","import React from 'react';\r\nconst Songs = (props) => {\r\n  console.log(props.playcount);\r\n  \r\n return(\r\n<div> \r\n  \r\n  <ul>\r\n  {props.songs.map((note) => {\r\n        return (    \r\n  <ul >\r\n  <li>{note.name} </li> \r\n  <li> {note.playcount} </li> \r\n </ul> \r\n\r\n       ) })}   \r\n</ul>\r\n</div>\r\n )\r\n}\r\n\r\nexport default Songs","import React from 'react';\r\nimport Lista from './Lista'\r\nimport Songs from './Songs'\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n   this.state = {\r\n      artists: [],\r\n      index: 0,\r\n      disabledNext: false,\r\n      disabledPrev: false\r\n    }\r\n  }\r\n\r\n  componentDidMount( ) {\r\n    const profile = this.props.profiles \r\n   const artistInfo = profile.map(artist =>\r\n      fetch(artist.songs)\r\n        .then(response => response.json())\r\n        .catch(err => console.error(err))\r\n    )\r\n    Promise.all(artistInfo)\r\n      .then(arrayArtist => {\r\n        const dataArtist = arrayArtist.map(artist => {\r\n          console.log(artist);\r\n          \r\n                    return {\r\n              name:  artist.toptracks.track[0].artist.name,\r\n          image: artist.toptracks.track[0].image[3]['#text'],\r\n            songs:artist.toptracks.track \r\n            \r\n          \r\n          }\r\n        })\r\n        this.setState({\r\n          artists: dataArtist\r\n        })\r\n      })\r\n  \r\n\r\n  }\r\n  togglePrev(e) {\r\n    let index = this.state.index - 1\r\n    let disabledPrev = false\r\n    if (index <= 0) {\r\n      e.preventDefault()\r\n      index = 0\r\n      disabledPrev = true\r\n    }\r\n\r\n    this.setState({ index: index, disabledPrev: disabledPrev, disabledNext: false })\r\n  }\r\n\r\n  toggleNext(e) {\r\n    let index = this.state.index + 1\r\n    let disabledNext = false\r\n    if (index === this.props.profiles.length - 1    ) {\r\n      e.preventDefault()\r\n      index = this.props.profiles.length - 1\r\n      disabledNext = true\r\n    }\r\n\r\n    this.setState({ index: index, disabledNext: disabledNext, disabledPrev: false })\r\n  }\r\n  render() {\r\n    const { disabledNext, disabledPrev } = this.state\r\n        return (\r\n        <div>\r\n          <div>\r\n            \r\n            {this.state.artists.map((artist) =>\r\n              <Lista \r\n                name={artist.name}\r\n                image={artist.image}\r\n                \r\n                // songs={artist.songs}\r\n               />\r\n\r\n            )[this.state.index]\r\n }\r\n<button onClick={this.togglePrev.bind(this)} disabled={disabledPrev}>Prev</button>\r\n            <button onClick={this.toggleNext.bind(this)} disabled={disabledNext}>Next</button>\r\n\r\n  \r\n  {this.state.artists.map((artist) =>\r\n              <Songs\r\n                songs={artist.songs}\r\n                \r\n               />\r\n\r\n            )[this.state.index]\r\n }\r\n\r\n \r\n          </div>\r\n       \r\n</div>\r\n      )\r\n    \r\n  }\r\n}\r\nexport default App","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n\r\n              // Execute callback\r\n              if (config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport \"font-awesome/css/font-awesome.min.css\";\r\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\r\nimport \"mdbreact/dist/css/mdb.css\";\r\n\r\nimport profiles from './profiles';\r\nReactDOM.render(<App   profiles={profiles}/>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}